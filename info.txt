Some principals -
Use Redis as a cache and if not in the cache call the backend system to repopulate the cache, 
Use a DB for Data Storage (DynamoDB over Oracle) that is transient or needs longer persistence, 
use Queues for things that can repeat (eg store and forward)


Refferal 

https://www.linkedin.com/in/vikrant-kandgaonkar-41753088/


package uk.co.britishgas.uaa.oauth2.token;

import static org.springframework.security.oauth2.provider.token.AccessTokenConverter.*;
import static uk.co.britishgas.uaa.converters.OnlineJwtUserAuthenticationConverter.AUTH_CODE;

import java.util.Map;
import java.util.Optional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.jwt.Jwt;
import org.springframework.security.jwt.JwtHelper;
import org.springframework.security.oauth2.common.ExpiringOAuth2RefreshToken;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.common.OAuth2RefreshToken;
import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
import org.springframework.security.oauth2.common.util.JsonParser;
import org.springframework.security.oauth2.common.util.JsonParserFactory;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
import org.springframework.util.Assert;
import uk.co.britishgas.uaa.models.Client;
import uk.co.britishgas.uaa.persistence.entity.OamUser;
import uk.co.britishgas.uaa.repository.OamUserRepository;
import uk.co.britishgas.uaa.repository.redis.JwtTokenRepository;
import uk.co.britishgas.uaa.security.TokenGenerator;
import uk.co.britishgas.uaa.service.ClientService;

/**
 * Custom JWT token store - To blacklist tokens and check for blacklisted tokens.
 *
 * @author Karthik Battula
 */
@Slf4j
public class OnlineJwtTokenStore extends JwtTokenStore {

  @Autowired private JwtTokenRepository tokenRepository;
  @Autowired private ClientService clientService;
  @Autowired private OamUserRepository oamUserRepository;
  @Autowired private TokenGenerator tokenGenerator;

  private JsonParser objectMapper = JsonParserFactory.create();

  public OnlineJwtTokenStore(JwtAccessTokenConverter jwtTokenEnhancer) {
    super(jwtTokenEnhancer);
  }

  @Override
  public OAuth2RefreshToken readRefreshToken(String tokenValue) {
    OAuth2RefreshToken refreshToken = super.readRefreshToken(tokenValue);
    Map<String, Object> claims = getClaims(refreshToken.getValue());
    if (isTokenBlacklisted((String) claims.get(AUTH_CODE))
        || isTokenBlacklisted((String) claims.get(ATI))) {
      throw new InvalidGrantException("error.client.refresh_token.revoked");
    }
    return refreshToken;
  }

  @Override
  public OAuth2AccessToken readAccessToken(String tokenValue) {
    OAuth2AccessToken accessToken = super.readAccessToken(tokenValue);
    Map<String, Object> claims = getClaims(accessToken.getValue());
    if (isTokenBlacklisted((String) claims.get(AUTH_CODE))
        || isTokenBlacklisted((String) claims.get(JTI))) {
      throw new InvalidGrantException("error.client.access_token.revoked");
    }
    return accessToken;
  }

  @Override
  public void removeRefreshToken(OAuth2RefreshToken token) {
    Assert.isInstanceOf(ExpiringOAuth2RefreshToken.class, token);

    ExpiringOAuth2RefreshToken refreshToken = (ExpiringOAuth2RefreshToken) token;
    if (!isRefreshTokenExpired(refreshToken)) {
      int expiryInSeconds =
          (int) (refreshToken.getExpiration().getTime() - System.currentTimeMillis() / 1000L);
      Map<String, Object> claims = getClaims(token.getValue());
      String tokenId = (String) claims.get(ATI);
      blackListToken(tokenId, expiryInSeconds);
      log.debug("Refresh token is blacklisted: {}", tokenId);
    }
  }

  @Override
  public void removeAccessToken(OAuth2AccessToken token) {
    if (!token.isExpired()) {
      Map<String, Object> claims = getClaims(token.getValue());
      Client client = clientService.fetchClient((String) claims.get(CLIENT_ID));
      String tokenId = (String) claims.get(JTI);
      // setting the expiry time to refresh token validity, because access token expires early, but
      // related refresh token with more expiry time is still out there.
      blackListToken(tokenId, client.getRefreshTokenValiditySeconds());
      log.debug("Access token is blacklisted, tokenId: {}", tokenId);
    }
  }

  /**
   * Helper method to decode claims from JWT - token's signature is already verified on Read
   *
   * @param value
   * @return claims
   */
  private Map<String, Object> getClaims(String value) {
    Jwt jwt = JwtHelper.decode(value);
    return objectMapper.parseMap(jwt.getClaims());
  }

  public void removeAccessToken(String token) {
    OAuth2AccessToken accessToken = readAccessToken(token);
    removeAccessToken(accessToken);
  }

  /**
   * Blacklists the tokens based on AuthCode generated for the user. And updates the DB with new
   * AuthCode
   *
   * @param clientId
   * @param email
   */
  public void removeAccessTokenForUser(String clientId, String email) {
    OamUser existingOamUser = oamUserRepository.findByEmailAddress(email);
    if (Optional.ofNullable(existingOamUser).isPresent()) {
      Client client = clientService.fetchClient(clientId);
      blackListToken(
          existingOamUser.getAuthorizationCode(), client.getRefreshTokenValiditySeconds());
      updateAuthorizationCode(existingOamUser, email);
      log.debug("Access tokens are blacklisted for user email: {}", email);
    } else {
      log.error("Error revoking tokens for user: {}", email);
    }
  }

  private void blackListToken(String tokenValue, int expiryInSeconds) {
    JwtBlackListToken token = new JwtBlackListToken();
    token.setTokenId(tokenValue);
    token.setExpiry(expiryInSeconds);
    tokenRepository.save(token);
  }

  private void updateAuthorizationCode(OamUser user, String uniqueToken) {
    if (Optional.ofNullable(user).isPresent()) {
      user.setAuthorizationCode(tokenGenerator.generateUniqueToken(uniqueToken));
      oamUserRepository.save(user);
      log.debug("Updated user with new Authorization code: {}", uniqueToken);
    }
  }

  private boolean isRefreshTokenExpired(ExpiringOAuth2RefreshToken refreshToken) {
    return refreshToken.getExpiration() == null
        || System.currentTimeMillis() > refreshToken.getExpiration().getTime();
  }

  private boolean isTokenBlacklisted(String tokenId) {
    try {
      return tokenRepository.existsById(tokenId);
    } catch (IllegalArgumentException ex) {
      return false;
    }
  }
}

private EnrichedTransactionType getEnrichedTransactionTypeForTransfer(
        MessageType messageType, Accounts accounts, Network network, String sourceSystem, Transaction transaction) {

    ProductAccountType productReceiverAccountType = accounts.getReceiverAccountData().getProductAccountType().orElse(ProductAccountType.UNKNOWN);

    ProductAccountType productSenderAccountType = accounts.getSenderAccountData().getProductAccountType().orElse(ProductAccountType.UNKNOWN);

    return switch (productReceiverAccountType, productSenderAccountType, network, sourceSystem) {
        case (FDIC, FDIC, _, _) -> EnrichedTransactionType.FDIC_TRANSFER;
        case (_, _, THOR, FDR.name()) -> switch (accounts.getSenderAccountData().getAccount().getDomain(),
                accounts.getReceiverAccountData().getAccount().getDomain()) {
            case ("BLOCKCHAIN", "BLOCKCHAIN") -> EnrichedTransactionType.FDR_B2B_TRANSFER;
            case (_, _) when transactionUtils.isCounterPartyPayout(
                    Optional.of(transaction).map(Transaction::getTransactionDetail)) ->
                EnrichedTransactionType.FDR_TCOIN_PAYOUT;
            case (_, _) -> EnrichedTransactionType.FDR_PAYMENT;
        };
        case (_, _, ODR, PartnerSystem.ODR.name()) -> EnrichedTransactionType.TCOIN_TRANSACT;
        default -> TRANSACTION_TYPE_ENUM_MAP.getOrDefault(messageType, EnrichedTransactionType.UNKNOWN);
    };
}
